{"remainingRequest":"C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\src\\views\\Home.vue","mtime":1618861463316},{"path":"C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618327826946},{"path":"C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1618327852331},{"path":"C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618327826946},{"path":"C:\\Users\\Mathe\\OneDrive\\Documentos\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\index.js","mtime":1618327852328}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}