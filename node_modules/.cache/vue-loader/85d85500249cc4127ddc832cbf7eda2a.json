{"remainingRequest":"C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\src\\components\\global\\MenuBar.vue?vue&type=template&id=d3b57c90&scoped=true&","dependencies":[{"path":"C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\src\\components\\global\\MenuBar.vue","mtime":1619120156833},{"path":"C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619113983969},{"path":"C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1619113991282},{"path":"C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619113983969},{"path":"C:\\Users\\thiag\\Documents\\GitHub\\Indicou\\node_modules\\vue-loader\\lib\\index.js","mtime":1619113991282}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}