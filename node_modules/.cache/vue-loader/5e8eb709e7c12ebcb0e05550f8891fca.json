{"remainingRequest":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\indicou\\desenvolvimento\\Indicou\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"D:\\indicou\\desenvolvimento\\Indicou\\src\\views\\Home.vue","mtime":1623796327442},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\indicou\\desenvolvimento\\Indicou\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ2VyYWwiIH0sIFsKICAgIF9jKCJpbWciLCB7CiAgICAgIHN0YXRpY0NsYXNzOiAiaGVyby1ncmFwaGljLXJpZ2h0IiwKICAgICAgc3RhdGljU3R5bGU6IHsgb3BhY2l0eTogIjEiIH0sCiAgICAgIGF0dHJzOiB7CiAgICAgICAgc3JjOgogICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIxMjMwMzdmZjQyOTA0NzAyYjczN19oZXJvX3NoYXBlLnBuZyIsCiAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgIGhlaWdodDogIjI1MCIsCiAgICAgICAgc3Jjc2V0OgogICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIxMjMwMzdmZjQyOTA0NzAyYjczN19oZXJvX3NoYXBlLXAtNTAwLnBuZyIgKwogICAgICAgICAgIiA1MDB3LCAiICsKICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMyMTIzMDM3ZmY0MjkwNDcwMmI3MzdfaGVyb19zaGFwZS1wLTgwMC5wbmciICsKICAgICAgICAgICIgODAwdywgIiArCiAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjEyMzAzN2ZmNDI5MDQ3MDJiNzM3X2hlcm9fc2hhcGUucG5nIiArCiAgICAgICAgICAiIDg2N3ciLAogICAgICAgIHNpemVzOiAiKG1heC13aWR0aDogNDc5cHgpIDEwMHZ3LCAyMDMuOTAyNzg2MjU0ODgyOHB4IiwKICAgICAgICBhbHQ6ICIiCiAgICAgIH0KICAgIH0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLXdyYXAiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uIHctbmF2IiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgIHRyYW5zZm9ybToKICAgICAgICAgICAgICAidHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCkgc2NhbGUzZCgxLCAxLCAxKSByb3RhdGVYKDBkZWcpIHJvdGF0ZVkoMGRlZykgcm90YXRlWigwZGVnKSBza2V3KDBkZWcsIDBkZWcpIiwKICAgICAgICAgICAgInRyYW5zZm9ybS1zdHlsZSI6ICJwcmVzZXJ2ZS0zZCIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAiZGF0YS1jb2xsYXBzZSI6ICJtZWRpdW0iLAogICAgICAgICAgICAiZGF0YS1hbmltYXRpb24iOiAiZGVmYXVsdCIsCiAgICAgICAgICAgICJkYXRhLWR1cmF0aW9uIjogIjQwMCIsCiAgICAgICAgICAgIHJvbGU6ICJiYW5uZXIiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24tcmlnaHQiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICAgICAgIV92bS5sb2dhZG8KICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWRlY29yYXRpb24tbm9uZSBwcmltYXJ5LWN0YSB3LWlubGluZS1ibG9jayIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctdG9wIjogIjE2cHghaW1wb3J0YW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy1ib3R0b20iOiAiMTZweCFpbXBvcnRhbnQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiAiL21hcmtldCIsIHRhcmdldDogIl9ibGFuayIgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBkYXJrLWJsdWUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkFjZXNzYXIgQWdvcmEiKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFycm93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjA1NDE4ZjFhZDY1NWNkMjI0MjI4X2Fycm93LWxlZnQucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICA6IF9jKAogICAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtZGVjb3JhdGlvbi1ub25lIHByaW1hcnktY3RhIHctaW5saW5lLWJsb2NrIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiMTZweCFpbXBvcnRhbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLWJvdHRvbSI6ICIxNnB4IWltcG9ydGFudCIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvbG9naW4iLCB0YXJnZXQ6ICJfYmxhbmsiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgZGFyay1ibHVlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBY2Vzc2FyIEFnb3JhIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhcnJvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIwNTQxOGYxYWQ2NTVjZDIyNDIyOF9hcnJvdy1sZWZ0LnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInctbmF2LW92ZXJsYXkiLAogICAgICAgICAgICBhdHRyczogeyAiZGF0YS13Zi1pZ25vcmUiOiAiIiwgaWQ6ICJ3LW5hdi1vdmVybGF5LTAiIH0KICAgICAgICAgIH0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX20oMikKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoZXJvLXNlY3Rpb24iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidy1sYXlvdXQtZ3JpZCBoZXJvLWdyaWQtd3JhcHBlciIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZXJvLXRleHQtYmxvY2siLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBpZDogInctbm9kZS1fOTY2MTFlNjMtZjg2OC1iYWI3LWI0ZTgtYTAwZWJmNzY4YTY1LWIwMjAxMzEwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZXJvLXBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOgogICAgICAgICAgICAgICAgICAgICAgInRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlWCgwZGVnKSByb3RhdGVZKDBkZWcpIHJvdGF0ZVooMGRlZykgc2tldygwZGVnLCAwZGVnKSIsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogIjEiLAogICAgICAgICAgICAgICAgICAgICJ0cmFuc2Zvcm0tc3R5bGUiOiAicHJlc2VydmUtM2QiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiTmEgSW5kaWNvdSB2b2PDqiB0ZW0gQ2VudGVuYXMgZGUgT3DDp8O1ZXMgZGUgRW1wcmVzYXMsIFNlcnZpw6dvcyBlIFByb2R1dG9zIHBhcmEgaW5kaWNhciBlIHR1ZG8gaXNzbyBlbSB0cm9jYSBkZSBFeGNlbGVudGVzIENvbWlzc8O1ZXMhIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAhX3ZtLmxvZ2FkbwogICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1kZWNvcmF0aW9uLW5vbmUgYnV0dG9uLWhlcm8gdy1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpIHNrZXcoMGRlZywgMGRlZykiLAogICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAiMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2Zvcm0tc3R5bGUiOiAicHJlc2VydmUtM2QiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdG86ICIvbWFya2V0IiwKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdy1pZCI6ICI3MjFmZWI3MS03ZDMxLTgzZTEtOTg0MS1mYjA1NTU4MjE1MjYiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBY2Vzc2FyIEFnb3JhIildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIDogX2MoCiAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtZGVjb3JhdGlvbi1ub25lIGJ1dHRvbi1oZXJvIHctYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybToKICAgICAgICAgICAgICAgICAgICAgICAgICAidHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCkgc2NhbGUzZCgxLCAxLCAxKSByb3RhdGVYKDBkZWcpIHJvdGF0ZVkoMGRlZykgcm90YXRlWigwZGVnKSBza2V3KDBkZWcsIDBkZWcpIiwKICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAidHJhbnNmb3JtLXN0eWxlIjogInByZXNlcnZlLTNkIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAiL2xvZ2luIiwKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdy1pZCI6ICI3MjFmZWI3MS03ZDMxLTgzZTEtOTg0MS1mYjA1NTU4MjE1MjYiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBY2Vzc2FyIEFnb3JhIildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbSg0KQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF92bS5fbSg1KSwKICAgIF92bS5fbSg2KSwKICAgIF92bS5fbSg3KSwKICAgIF92bS5fbSg4KSwKICAgIF92bS5fbSg5KSwKICAgIF92bS5fbSgxMCksCiAgICBfdm0uX20oMTEpLAogICAgX2MoInNjcmlwdCIsIHsKICAgICAgYXR0cnM6IHsKICAgICAgICBzcmM6CiAgICAgICAgICAiaHR0cHM6Ly9kM2U1NHYxMDNqOHFiYi5jbG91ZGZyb250Lm5ldC9qcy9qcXVlcnktMy41LjEubWluLmRjNWU3ZjE4YzguanMiLAogICAgICAgIHR5cGU6ICJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0IiwKICAgICAgICBpbnRlZ3JpdHk6ICJzaGEyNTYtOS9hbGlVOGRHZDJ0YjZPU3N1eml4ZVY0eS9mYVRxZ0Z0b2hldHBoYmJqMD0iLAogICAgICAgIGNyb3Nzb3JpZ2luOiAiYW5vbnltb3VzIgogICAgICB9CiAgICB9KSwKICAgIF9jKCJzY3JpcHQiLCB7CiAgICAgIGF0dHJzOiB7IHNyYzogIi4uL2Fzc2V0cy93ZWJmbG93LmpzIiwgdHlwZTogImFwcGxpY2F0aW9uL2phdmFzY3JpcHQiIH0KICAgIH0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLWxlZnQiIH0sIFsKICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiYnJhbmQgdy1uYXYtYnJhbmQiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1hZ2UiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMyMDc2ZjI4YTcyNjA3NGVjYjY3ZDFfa29hbGEtbG9nbzIucG5nIiwKICAgICAgICAgICAgd2lkdGg6ICI1MCIsCiAgICAgICAgICAgIHNpemVzOiAiKG1heC13aWR0aDogNzY3cHgpIDEwMHZ3LCA1MHB4IiwKICAgICAgICAgICAgc3Jjc2V0OgogICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMyMDc2ZjI4YTcyNjA3NGVjYjY3ZDFfa29hbGEtbG9nbzItcC01MDAucG5nIiArCiAgICAgICAgICAgICAgIiA1MDB3LCAiICsKICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjA3NmYyOGE3MjYwNzRlY2I2N2QxX2tvYWxhLWxvZ28yLXAtODAwLnBuZyIgKwogICAgICAgICAgICAgICIgODAwdywgIiArCiAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIwNzZmMjhhNzI2MDc0ZWNiNjdkMV9rb2FsYS1sb2dvMi5wbmciICsKICAgICAgICAgICAgICAiIDEwMDB3IiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgIm5hdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXYtbWVudS0yIHctbmF2LW1lbnUiLCBhdHRyczogeyByb2xlOiAibmF2aWdhdGlvbiIgfSB9LAogICAgICBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgdy1uYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiUXVlbSBTb21vcyIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsgdy1uYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiQnVzaW5lc3MiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIHctbmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlNvbHXDp8O1ZXMiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIHctbmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkNvbnRhdG8iKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLW1vYiB3LW5hdiIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICJkYXRhLWNvbGxhcHNlIjogIm1lZGl1bSIsCiAgICAgICAgICAiZGF0YS1hbmltYXRpb24iOiAiZGVmYXVsdCIsCiAgICAgICAgICAiZGF0YS1kdXJhdGlvbiI6ICI0MDAiLAogICAgICAgICAgImRhdGEtZWFzaW5nIjogImVhc2Utb3V0IiwKICAgICAgICAgICJkYXRhLWVhc2luZzIiOiAiZWFzZS1vdXQiLAogICAgICAgICAgcm9sZTogImJhbm5lciIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24tY29udGFpbmVyLW1vYiIgfSwgWwogICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAidy1uYXYtYnJhbmQiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbG9nbyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIwNzZmMjhhNzI2MDc0ZWNiNjdkMV9rb2FsYS1sb2dvMi5wbmciLAogICAgICAgICAgICAgICAgc2l6ZXM6ICIobWF4LXdpZHRoOiA3NjdweCkgNDBweCwgMTAwdnciLAogICAgICAgICAgICAgICAgc3Jjc2V0OgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjA3NmYyOGE3MjYwNzRlY2I2N2QxX2tvYWxhLWxvZ28yLXAtNTAwLnBuZyIgKwogICAgICAgICAgICAgICAgICAiIDUwMHcsICIgKwogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjA3NmYyOGE3MjYwNzRlY2I2N2QxX2tvYWxhLWxvZ28yLXAtODAwLnBuZyIgKwogICAgICAgICAgICAgICAgICAiIDgwMHcsICIgKwogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjA3NmYyOGE3MjYwNzRlY2I2N2QxX2tvYWxhLWxvZ28yLnBuZyIgKwogICAgICAgICAgICAgICAgICAiIDEwMDB3IiwKICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAibmF2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9iaWxlLW5hdiB3LW5hdi1tZW51IiwKICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAibmF2aWdhdGlvbiIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9iaWxlLW5hdi1saW5rIHctbmF2LWxpbmsiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkhvbWUiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vYmlsZS1uYXYtbGluayB3LW5hdi1saW5rIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJNb2JpbGUgTGluayAxIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2JpbGUtbmF2LWxpbmsgdy1uYXYtbGluayIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiTW9iaWxlIExpbmsgMiIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9iaWxlLW5hdi1saW5rIHctbmF2LWxpbmsiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIk1vYmlsZSBMaW5rIDMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vYmlsZS1uYXYtbGluayB3LW5hdi1saW5rIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJNb2JpbGUgTGluayA0IildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2JpbGUtbmF2LWxpbmsgdy1uYXYtbGluayIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiU2lnbiBVcCIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWVudS1tb2Igdy1uYXYtYnV0dG9uIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiLXdlYmtpdC11c2VyLXNlbGVjdCI6ICJ0ZXh0IiB9LAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJtZW51IiwKICAgICAgICAgICAgICAgIHJvbGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgdGFiaW5kZXg6ICIwIiwKICAgICAgICAgICAgICAgICJhcmlhLWNvbnRyb2xzIjogInctbmF2LW92ZXJsYXktMSIsCiAgICAgICAgICAgICAgICAiYXJpYS1oYXNwb3B1cCI6ICJtZW51IiwKICAgICAgICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogImZhbHNlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidy1pY29uLW5hdi1tZW51IiB9KV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LW5hdi1vdmVybGF5IiwKICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXdmLWlnbm9yZSI6ICIiLCBpZDogInctbmF2LW92ZXJsYXktMSIgfQogICAgICAgIH0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJoMSIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogImhlcm8taDEiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICB0cmFuc2Zvcm06CiAgICAgICAgICAgICJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpIHNrZXcoMGRlZywgMGRlZykiLAogICAgICAgICAgb3BhY2l0eTogIjEiLAogICAgICAgICAgInRyYW5zZm9ybS1zdHlsZSI6ICJwcmVzZXJ2ZS0zZCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfdm0uX3YoIlVtIHVuaXZlcnNvIGRlICIpLAogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc3BhbiIgfSwgW192bS5fdigiSW5kaWNhw6fDtWVzICIpXSksCiAgICAgICAgX3ZtLl92KCJhbyBzZXUgYWxjYW5jZSEgIikKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlcm8taW1hZ2UtYmxvY2siIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImhlcm8taW1hZ2UiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICB0cmFuc2Zvcm06CiAgICAgICAgICAgICJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpIHNrZXcoMGRlZywgMGRlZykiLAogICAgICAgICAgb3BhY2l0eTogIjEiLAogICAgICAgICAgInRyYW5zZm9ybS1zdHlsZSI6ICJwcmVzZXJ2ZS0zZCIKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMxNjNmMjBlZmM4YWNhMjA0MmRjYjRfaW1hZ2UtaG9tZS5wbmciLAogICAgICAgICAgc2l6ZXM6ICIobWF4LXdpZHRoOiA0NzlweCkgMTAwdncsIChtYXgtd2lkdGg6IDEyNTJweCkgOTR2dywgMTE3N3B4IiwKICAgICAgICAgIHNyY3NldDoKICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzE2M2YyMGVmYzhhY2EyMDQyZGNiNF9pbWFnZS1ob21lLXAtNTAwLnBuZyIgKwogICAgICAgICAgICAiIDUwMHcsICIgKwogICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMTYzZjIwZWZjOGFjYTIwNDJkY2I0X2ltYWdlLWhvbWUtcC04MDAucG5nIiArCiAgICAgICAgICAgICIgODAwdywgIiArCiAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMxNjNmMjBlZmM4YWNhMjA0MmRjYjRfaW1hZ2UtaG9tZS5wbmciICsKICAgICAgICAgICAgIiAxMTc3dyIsCiAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZXJ2aWNlLXNlY3Rpb24gYmctd2hpdGUiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImgyIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMiBoMi1jZW50cmUgZnctNzAwIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICI0OHB4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU8OjbyBCZW5lZsOtY2lvcyBxdWUgdm9jw6ogcXVlcj8iKV0KICAgICAgICApLAogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInN0YW5kYXJkLXBhcmFncmFwaCBjZW50ZXIiIH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbSBhIEluZGljb3UgcXVhbHF1ZXIgcGVzc29hIHBvZGUgZ2FuaGFyIERpbmhlaXJvIGNvbSBpbmRpY2HDp8O1ZXMsIGFzIG1lbGhvcmVzIGNvbWlzc8O1ZXMgZG8gbWVyY2FkbyB2b2PDqiByZWNlYmUgYXF1aSEgRSBhaW5kYSBjb20gYSBJbmRpY291IEJ1c2luZXNzIHN1YSBlbXByZXNhIHRhbWLDqW0gcG9kZSBjcmVzY2VyIG11aXRvISIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctbGF5b3V0LWdyaWQgc2VydmljZS1ncmlkIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZ3JpZC1ibG9jayB3LWlubGluZS1ibG9jayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJncmlkLWljb24iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDQ2MzMyMDEzMWJfeWVsbG93LWljb24tMDEuc3ZnIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZmlsZS1kZXRhaWxzIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZhcS10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkZhdHVyZSBjb21vIG51bmNhIHZpc3RvIGFudGVzIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicGFyYWdyYXBoLWJhc2ljIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiSW5kaXF1ZSBpbsO6bWVyb3MgcHJvZHV0b3Mvc2VydmnDp29zIGUgZ2FuaGUgZXhjZWxlbnRlcyBjb21pc3PDtWVzLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImdyaWQtYmxvY2sgdy1pbmxpbmUtYmxvY2siLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZ3JpZC1pY29uIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGRkYTYyMjAxMzE5X2ljb24tMi5zdmciLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9maWxlLWRldGFpbHMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmFxLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiR2VyZSBMZWFkcywgQ2xpZW50ZXMgZSBDb252ZXJzw7VlcyEiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwYXJhZ3JhcGgtYmFzaWMiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJBIHN1YSBlbXByZXNhIHBvZGUgZ2VyYXIgdW0gYW1wbG8gcMO6YmxpY28gY29tIGJhc2UgZW0gc2V1cyBvYmpldGl2b3MgcHLDqS1kZWZpbmlkb3MuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZ3JpZC1ibG9jayB3LWlubGluZS1ibG9jayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJncmlkLWljb24iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDZhNzQyMDEzMjBfaWNvbi0zLnN2ZyIsCiAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2ZpbGUtZGV0YWlscyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmYXEtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJHZXJlIGNyZXNjaW1lbnRvIGEgdm9jw6ogZSBzdWEgZW1wcmVzYSEiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwYXJhZ3JhcGgtYmFzaWMiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJDb20gbyBhdW1lbnRvIGRlIGNsaWVudGVzIG8gc2V1IGZhdHVyYW1lbnRvIGF1bWVudGFyw6EgY29uc2lkZXJhdmVsbWVudGUuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJidXR0b24gZGFyay1ibHVlIHctYnV0dG9uIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIlZlamEgbWFpcyIpXQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1zZWN0aW9uIGJnLXdoaXRlIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1jb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctbGF5b3V0LWdyaWQgZmVhdHVyZXMtZ3JpZC13cmFwcGVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmUtaW1hZ2UtYmxvY2sgbXktNSIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1pbWFnZS0xIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjQwMGQxNTcwYjFhMzMxOGYwMTA3X2NvbnRlbnQtaW1hZ2UtMS5wbmciLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLXRleHQtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgyIGZ3LTcwMCAgbXktNCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjQ2cHgiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkEgw5puaWNhIGUgTWVsaG9yIFBsYXRhZm9ybWEgZGUgSW5kaWNhw6fDtWVzISIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGggXzQwLWJvdHRvbS1tYXJnaW4iIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiU29tb3MgYSDDum5pY2EgZSBNZWxob3IgUGxhdGFmb3JtYSBkZSBNYXJrZXRpbmcgZGUgSW5kaWNhw6fDtWVzIGRvIE1lcmNhZG8uIFNvbW9zIHVtYSBjZW50cmFsIGRlIGluZGljYcOnw7VlcyBjb21wbGV0YSBxdWUgcmXDum5lIGluw7ptZXJvcyB0aXBvcyBkZSBpbmRpY2HDp8O1ZXMgZSB1bWEgYWx0YSBmbGV4aWJpbGlkYWRlIG5hIGRlZmluacOnw6NvIGRlIG9iamV0aXZvLCByZWNlYmltZW50b3MgZSBwYWdhbWVudG9zIGRlIGNvbWlzc8O1ZXMuICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNtYWxsLWJsb2NrcyIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZlYXR1cmUtaWNvbiIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzBlZmEwMDIwMDRkNDYzMzIwMTMxYl95ZWxsb3ctaWNvbi0wMS5zdmciLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSW5kaWNhw6fDo28gdmlhIEZvcm11bMOhcmlvIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzbWFsbC1ibG9ja3MiIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWljb24iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDA2NzMyMDEzMWVfeWVsbG93LWljb24tMDIuc3ZnIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkluZGljYcOnw6NvIHZpYSBMaW5rIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZlYXR1cmUtdGV4dC1ibG9jay0yIG10LTUgcHQtNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGlkOiAidy1ub2RlLV84MTg5N2Q5OC01NzI4LWJkNTYtZDg2NS01NmJhZmY0MGUxMWUtYjAyMDEzMTAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgyIGZ3LTcwMCIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiNDZweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBlcmZlaXRvIHBhcmEgcXVhbHF1ZXIgdGlwbyBkZSBOZWfDs2Npby4iKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInN0YW5kYXJkLXBhcmFncmFwaCBfNDAtYm90dG9tLW1hcmdpbiIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiQSBJbmRpY291IHNlcnZlIHBhcmEgcXVhbHF1ZXIgdGlwbyBkZSBOZWfDs2NpbyEgUG9zc3XDrW1vcyB0b2RvcyBvcyByZWN1cnNvcyBuZWNlc3PDoXJpb3MgdGFudG8gcGFyYSB2b2PDqiBxdWUgcXVlciBpbmRpY2FyLCBxdWFudG8gcGFyYSB2b2PDqiBxdWUgw6kgZW1wcmVzYSBlIGRlc2VqYSBhdW1lbnRhciBzZXVzIGNsaWVudGVzL2ZhdHVyYW1lbnRvLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24gXzAtdG9wLW1hcmdpbiB3LWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiU2FpYmEgbWFpcyIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1pbWFnZS1ibG9jayBtdC01IHB0LTUiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBpZDogInctbm9kZS1hMzlmZDQ3YS0zYTgzLWMwNjAtMTBiNi05NGE0ZWZlOThiYjMtYjAyMDEzMTAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1pbWFnZS0xIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMjQzOWIxYjU4ZTIzNzdlMzkxMzUzX2NvbnRlbnQtaW1hZ2UtMDIucG5nIiwKICAgICAgICAgICAgICAgICAgc3Jjc2V0OgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMyNDM5YjFiNThlMjM3N2UzOTEzNTNfY29udGVudC1pbWFnZS0wMi1wLTUwMC5wbmciICsKICAgICAgICAgICAgICAgICAgICAiIDUwMHcsICIgKwogICAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMyNDM5YjFiNThlMjM3N2UzOTEzNTNfY29udGVudC1pbWFnZS0wMi5wbmciICsKICAgICAgICAgICAgICAgICAgICAiIDcxMHciLAogICAgICAgICAgICAgICAgICBzaXplczoKICAgICAgICAgICAgICAgICAgICAiKG1heC13aWR0aDogNDc5cHgpIDk1dncsIChtYXgtd2lkdGg6IDc2N3B4KSA5NHZ3LCA1MDBweCIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNTQwIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLXNlY3Rpb24gYmctd2hpdGUiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImhhbGZ0b25lLXBhdHRlcm4iLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZGFmMDIyMDEzMWZfZG90cy5zdmciLAogICAgICAgICAgYWx0OiAiIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JhZGllbnQtZGl2IiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImgyIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoMiBoMi1jZW50cmUgZnctNzAwIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICI0MnB4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiVW0gYW1wbG8gbWl4IGRlIEluZGljYcOnw7VlcyIpXQogICAgICAgICksCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIGNlbnRlciIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRGVudHJvIGRhIGluZGljb3UgYWJyYW5nZW1vcyB0b2RvIHRpcG8gZGUgSW5kaWNhw6fDo28sIGFzc2ltIGFzIHBlc3NvYXMgcXVlIGluZGljYW0gcG9kZW0gdGVyIGluw7ptZXJvcyB2YWxvcmVzIGRlIGNvbWlzc8O1ZXMgcXVlIHZhcmlhbSBjb25mb3JtZSBjYWRhIGFudW5jaW8uIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidy1sYXlvdXQtZ3JpZCBncmlkLXdyYXBwZXItMiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWdyaWQtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24taW1hZ2UiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDU4MGMyMDEzM2RfcGFyY2VsLnN2ZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWhlYWRlciIgfSwgW192bS5fdigiUHJvZHV0b3MiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN0YW5kYXJkLXBhcmFncmFwaCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJUZW1vcyBhbsO6bmNpb3MgZGUgaW7Dum1lcm9zIHRpcG9zIGRlIFByb2R1dG9zIHRhbnRvcyBQcm9kdXRvcyBEaWdpdGFpcyBjb21vIHRhbWLDqW0gUHJvZHV0b3MgRsOtc2ljb3MuIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWdyaWQtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24taW1hZ2UiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDZjNGMyMDEzNDBfY2hhdHRpbmcuc3ZnIiwKICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmUtaGVhZGVyIiB9LCBbX3ZtLl92KCJQZXNzb2FzIildKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGgiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVm9jw6ogcG9kZSBzaW1wbGVzbWVudGUgaW5kaWNhciB1bWEgcGVzc29hIHBhcmEgdW1hIHRhcmVmYSBvdSB1bWEgZGV0ZXJtaW5hZGEgdmFnYSBkZSBlbXByZWdvLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ncmlkLWJsb2NrIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uLWltYWdlIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGRhYmQ4MjAxMzQxX3ZpZGVvY2FsbC5zdmciLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1oZWFkZXIiIH0sIFtfdm0uX3YoIlNlcnZpw6dvcyIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkluZGljYXIgZGV6ZW5hcyBkZSBTZXJ2acOnb3MgY29tbyBQZWRyZWlybywgUGludG9yLCBCYXJiZWlybyBudW5jYSBmb2kgdMOjbyBmYWNpbCBlIHLDoXBpZG8hIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWdyaWQtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24taW1hZ2UiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDEzYmIyMDEzNDJfbm90aWZpY2F0aW9uLnN2ZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWhlYWRlciIgfSwgW192bS5fdigiRW1wcmVzYXMiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN0YW5kYXJkLXBhcmFncmFwaCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJFbXByZXNhcyBkb3MgbWFpcyB2YXJpYWRvcyByYW1vcyBkZSBhdHVhw6fDo28gZXN0w6NvIGluc2VyaWRhcyBuYSBJbmRpY291IGNvbSB2YXJpYWRhcyBwcm9wb3N0YXMgZGUgaW5kaWNhw6fDo28iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmUtZ3JpZC1ibG9jayIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbi1pbWFnZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzBlZmEwMDIwMDRkMGFjNjIwMTM0M19jYWxlbmRhci5zdmciLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1oZWFkZXIiIH0sIFtfdm0uX3YoIk5lZ8OzY2lvcyIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlF1ZXIgaW5kaWNhciBuZWfDs2Npb3MgcGFyYSB1bWEgcGVzc29hLCBwYXJjZWlybywgYW1pZ28/IE9ww6fDtWVzIG7Do28gZmFsdGFtIHBhcmEgdm9jw6ouIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWdyaWQtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24taW1hZ2UiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDc4MzUyMDEzM2Zfb3Blbi1ib3guc3ZnIiwKICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmUtaGVhZGVyIiB9LCBbX3ZtLl92KCJMdWdhcmVzIildKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGgiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiU2FiZSBhcXVlbGUgbHVnYXIgbGVnYWwgcXVlIHZvY8OqIGZvaT8gRW50w6NvISBWb2PDqiBwb2RlIGluZGljYXIgcGVzc29hcyBwYXJhIHZpc2l0YS1sbyBlIHJlY2ViZXIgY29taXNzw7Vlcy4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXN0aW1vbmlhbC1zZWN0aW9uIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJoZXJvLWdyYXBoaWMtcmlnaHQiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7IG9wYWNpdHk6ICIxIiB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZGYxZTYyMDEzMjRfSGVybyUyMFNoYXBlJTIwQ1RBLnN2ZyIsCiAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImgyIHdoaXRlIGZ3LTcwMCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjQ3cHgiIH0KICAgICAgICB9LAogICAgICAgIFtfYygic3Ryb25nIiwgW192bS5fdigiTm9zc29zIGNsaWVudGVzIHNhYmVtIG1lbGhvciIpXSldCiAgICAgICksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInN0YW5kYXJkLXBhcmFncmFwaCBjZW50ZXIgd2hpdGUiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU8OjbyBjZW50ZW5hcyBkZSBjbGllbnRlcyBxdWUgasOhIHV0aWxpemFtIGEgSW5kaWNvdSBlIG5vcyBkw6NvIGEgc2F0aXNmYcOnw6NvIGRlIGVzdGFyIG1lbGhvcmFuZG8gY2FkYSBkaWEgbWFpcyEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJzbGlkZXIgdy1zbGlkZXIiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgImRhdGEtYW5pbWF0aW9uIjogInNsaWRlIiwKICAgICAgICAgICAgImRhdGEtZHVyYXRpb24iOiAiNTAwIiwKICAgICAgICAgICAgImRhdGEtaW5maW5pdGUiOiAiMSIsCiAgICAgICAgICAgIHJvbGU6ICJyZWdpb24iLAogICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJjYXJvdXNlbCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFzayB3LXNsaWRlci1tYXNrIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogInctc2xpZGVyLW1hc2stMCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzbGlkZSB3LXNsaWRlIiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgb3BhY2l0eTogIjEiLCB0cmFuc2Zvcm06ICJ0cmFuc2xhdGVYKDBweCkiIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsIjogIjEgb2YgMyIsIHJvbGU6ICJncm91cCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzbGlkZS13cmFwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicXVvdGVzLWljb24iLAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSBzY2FsZTNkKDEsIDEsIDEpIHJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpIHNrZXcoMGRlZywgMGRlZykiLAogICAgICAgICAgICAgICAgICAgICAgICAidHJhbnNmb3JtLXN0eWxlIjogInByZXNlcnZlLTNkIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQwNDc3MjAxMzI3X2ljbi5zdmciLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGgiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlNlcGFyYXRlZCB0aGV5IGxpdmUgaW4gQm9va21hcmtzZ3JvdmUgcmlnaHQgYXQgdGhlIGNvYXN0IG9mIHRoZSBTZW1hbnRpY3MsIGEgbGFyZ2UgbGFuZ3VhZ2Ugb2NlYW4uIEEgc21hbGwgcml2ZXIgbmFtZWQgRHVkZW4gZmxvd3MgYnkgdGhlaXIgcGxhY2UgYW5kIHN1cHBsaWVzIGl0IHdpdGggdGhlIG5lY2Vzc2FyeSByZWdlbGlhbGlhLiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2ZpbGUtYmxvY2siIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZmlsZS1pbWFnZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzBlZmEwMDIwMDRkM2Y3MDIwMTMzOF90ZWFtMDUuanBnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjYwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9maWxlLWRldGFpbHMiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmYXEtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNhcmFoIFNtaXRoIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFyYWdyYXBoLWJhc2ljIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMZWFkIERldmVsb3BlciwgRmxvd2Jhc2UiKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzbGlkZSB3LXNsaWRlIiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgb3BhY2l0eTogIjAuNSIsIHRyYW5zZm9ybTogInRyYW5zbGF0ZVgoMHB4KSIgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICIyIG9mIDMiLAogICAgICAgICAgICAgICAgICAgIHJvbGU6ICJncm91cCIsCiAgICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2xpZGUtd3JhcCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJxdW90ZXMtaWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMCwgMCwgMSkgcm90YXRlWCgwZGVnKSByb3RhdGVZKDBkZWcpIHJvdGF0ZVooMGRlZykgc2tldygwZGVnLCAwZGVnKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRyYW5zZm9ybS1zdHlsZSI6ICJwcmVzZXJ2ZS0zZCIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQwNDc3MjAxMzI3X2ljbi5zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiU2VwYXJhdGVkIHRoZXkgbGl2ZSBpbiBCb29rbWFya3Nncm92ZSByaWdodCBhdCB0aGUgY29hc3Qgb2YgdGhlIFNlbWFudGljcywgYSBsYXJnZSBsYW5ndWFnZSBvY2Vhbi4gQSBzbWFsbCByaXZlciBuYW1lZCBEdWRlbiBmbG93cyBieSB0aGVpciBwbGFjZSBhbmQgc3VwcGxpZXMgaXQgd2l0aCB0aGUgbmVjZXNzYXJ5IHJlZ2VsaWFsaWEuIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZmlsZS1ibG9jayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInByb2ZpbGUtaW1hZ2UiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMwZWZhMDAyMDA0ZDUyZGYyMDEzMzlfdGVhbTA2LmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInByb2ZpbGUtZGV0YWlscyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhcS10aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQ3JhaWcgU2FtcyIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcmFncmFwaC1iYXNpYyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTGVhZCBEZXZlbG9wZXIsIEZsb3diYXNlIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2xpZGUgdy1zbGlkZSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IG9wYWNpdHk6ICIwLjUiLCB0cmFuc2Zvcm06ICJ0cmFuc2xhdGVYKDBweCkiIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiAiMyBvZiAzIiwKICAgICAgICAgICAgICAgICAgICByb2xlOiAiZ3JvdXAiLAogICAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNsaWRlLXdyYXAiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicXVvdGVzLWljb24iLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSBzY2FsZTNkKDAsIDAsIDEpIHJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpIHNrZXcoMGRlZywgMGRlZykiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2Zvcm0tc3R5bGUiOiAicHJlc2VydmUtM2QiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzBlZmEwMDIwMDRkMDQ3NzIwMTMyN19pY24uc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNlcGFyYXRlZCB0aGV5IGxpdmUgaW4gQm9va21hcmtzZ3JvdmUgcmlnaHQgYXQgdGhlIGNvYXN0IG9mIHRoZSBTZW1hbnRpY3MsIGEgbGFyZ2UgbGFuZ3VhZ2Ugb2NlYW4uIEEgc21hbGwgcml2ZXIgbmFtZWQgRHVkZW4gZmxvd3MgYnkgdGhlaXIgcGxhY2UgYW5kIHN1cHBsaWVzIGl0IHdpdGggdGhlIG5lY2Vzc2FyeSByZWdlbGlhbGlhLiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInByb2ZpbGUtYmxvY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9maWxlLWltYWdlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQwNjIyMjAxMzM0X3RlYW0wMi5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjYwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9maWxlLWRldGFpbHMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXEtdGl0bGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNpbW9uIExlZSIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcmFncmFwaC1iYXNpYyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTGVhZCBEZXZlbG9wZXIsIEZsb3diYXNlIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInctc2xpZGVyLWFyaWEtbGFiZWwiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgImFyaWEtbGl2ZSI6ICJvZmYiLAogICAgICAgICAgICAgICAgICAiYXJpYS1hdG9taWMiOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICAgICJkYXRhLXdmLWlnbm9yZSI6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJyb3ctbGVmdCB3LXNsaWRlci1hcnJvdy1sZWZ0IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB0YWJpbmRleDogIjAiLAogICAgICAgICAgICAgICAgImFyaWEtY29udHJvbHMiOiAidy1zbGlkZXItbWFzay0wIiwKICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogInByZXZpb3VzIHNsaWRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbiB3LWljb24tc2xpZGVyLWxlZnQiIH0pXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJyb3ctcmlnaHQgdy1zbGlkZXItYXJyb3ctcmlnaHQiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICByb2xlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHRhYmluZGV4OiAiMCIsCiAgICAgICAgICAgICAgICAiYXJpYS1jb250cm9scyI6ICJ3LXNsaWRlci1tYXNrLTAiLAogICAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiAibmV4dCBzbGlkZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24gdy1pY29uLXNsaWRlci1yaWdodCIgfSldCiAgICAgICAgICApLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzbGlkZS1uYXYgdy1zbGlkZXItbmF2IHctcm91bmQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInctc2xpZGVyLWRvdCB3LWFjdGl2ZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICJkYXRhLXdmLWlnbm9yZSI6ICIiLAogICAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiAiU2hvdyBzbGlkZSAxIG9mIDMiLAogICAgICAgICAgICAgICAgImFyaWEtcHJlc3NlZCI6ICJ0cnVlIiwKICAgICAgICAgICAgICAgIHJvbGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgdGFiaW5kZXg6ICIwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LXNsaWRlci1kb3QiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAiZGF0YS13Zi1pZ25vcmUiOiAiIiwKICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIlNob3cgc2xpZGUgMiBvZiAzIiwKICAgICAgICAgICAgICAgICJhcmlhLXByZXNzZWQiOiAiZmFsc2UiLAogICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB0YWJpbmRleDogIi0xIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LXNsaWRlci1kb3QiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAiZGF0YS13Zi1pZ25vcmUiOiAiIiwKICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIlNob3cgc2xpZGUgMyBvZiAzIiwKICAgICAgICAgICAgICAgICJhcmlhLXByZXNzZWQiOiAiZmFsc2UiLAogICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB0YWJpbmRleDogIi0xIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiaGFsZnRvbmUtcGF0dGVybi0yIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGRhZjAyMjAxMzFmX2RvdHMuc3ZnIiwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctc2VjdGlvbiBiZy13aGl0ZSIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtY29udGFpbmVyIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiaDIiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImgyIGZ3LTcwMCIsIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiNDdweCIgfSB9LAogICAgICAgICAgW192bS5fdigiTm90w61jaWFzIGUgQXJ0aWdvcyIpXQogICAgICAgICksCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIGNlbnRlciIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiT25lIGRheSwgYWZ0ZXIgYSB0cm91YmxpbmcgdmlzaXQgZnJvbSB0aGUgZ2lhbnQgQ2F0aGVyaW5lIENsaWZmb3JkLCBDaGxvZSBsZWF2ZXMgaGVyIGhvdXNlIGFuZCBzZXRzIG91dCBpbiBzZWFyY2ggb2YgdGhyZWUgY29zeSBzYXVzYWdlcy4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LWxheW91dC1ncmlkIG5ld3MtZ3JpZCIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJ0aWNsZXMtYmxvY2sgdy1pbmxpbmUtYmxvY2siLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhcnRpY2xlLXRodW1ibmFpbCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzBlZmEwMDIwMDRkMjQ4ODIwMTMyMV9ibG9nLWltZy5wbmciLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9nLWNhdGVnb3J5IiB9LCBbX3ZtLl92KCJCdXNpbmVzcyIpXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9nLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIldhdmVzIGZsdW5nIHRoZW1zZWx2ZXMgYXQgdGhlIGJsdWUgZXZlbmluZyIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhcnRpY2xlLXByb2ZpbGUtYmxvY2siIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJ0aWNsZS1wcm9maWxlLWltYWdlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQ1MmRmMjAxMzM5X3RlYW0wNi5qcGciLAogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNDYiLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2ZpbGUtZGV0YWlscyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImF1dGhvci10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiU3RldmVuIFNtaXRoIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZGF0ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiMjAgRGVjZW1iZXIgMjAxOSIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhcnRpY2xlcy1ibG9jayB3LWlubGluZS1ibG9jayIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFydGljbGUtdGh1bWJuYWlsIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQyNDg4MjAxMzIxX2Jsb2ctaW1nLnBuZyIsCiAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctY2F0ZWdvcnkiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTWFya2V0aW5nIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQSByZWQgZmxhcmUgc2lsaG91ZXR0ZWQgdGhlIGphZ2dlZCBlZGdlIG9mIGEgd2luZyIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhcnRpY2xlLXByb2ZpbGUtYmxvY2siIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJ0aWNsZS1wcm9maWxlLWltYWdlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQzZjcwMjAxMzM4X3RlYW0wNS5qcGciLAogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNDYiLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2ZpbGUtZGV0YWlscyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImF1dGhvci10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiVGF0aWFuYSBHYWdlbG1hbiIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjIwIERlY2VtYmVyIDIwMTkiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJ0aWNsZXMtYmxvY2sgdy1pbmxpbmUtYmxvY2siLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhcnRpY2xlLXRodW1ibmFpbCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzBlZmEwMDIwMDRkMjQ4ODIwMTMyMV9ibG9nLWltZy5wbmciLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9nLWNhdGVnb3J5IiB9LCBbX3ZtLl92KCJCdXNpbmVzcyIpXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9nLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkFsbW9zdCBiZWZvcmUgd2Uga25ldyBpdCwgd2UgaGFkIGxlZnQgdGhlIGdyb3VuZCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhcnRpY2xlLXByb2ZpbGUtYmxvY2siIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYXJ0aWNsZS1wcm9maWxlLWltYWdlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWRzLXNzbC53ZWJmbG93LmNvbS82MGMwZWY5ZjAyMDA0ZDdkNTMyMDEzMGMvNjBjMGVmYTAwMjAwNGQ0ZTFmMjAxMzM1X3RlYW0wMy5qcGciLAogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNDYiLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2ZpbGUtZGV0YWlscyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImF1dGhvci10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiVG9yc3RlbiBQYXVsc3NvbiIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjIwIERlY2VtYmVyIDIwMTkiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm90dG9tLXNlY3Rpb24gYmctd2hpdGUiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWNvbnRhaW5lciBob3Jpem9udGFsIiB9LCBbCiAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImgzIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIk5vc3NhcyBwZXJndW50YXMgbWFpcyBjb211bnMuLi4iKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidy1sYXlvdXQtZ3JpZCBncmlkLWZhcSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJxdWVzdGlvbnMtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmYXEtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNvbW8gZXUgZmHDp28gcGFyYSBJbmRpY2FyPyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGgiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiT25lIGRheSwgYWZ0ZXIgYSB0cm91YmxpbmcgdmlzaXQgZnJvbSB0aGUgZ2lhbnQgQ2F0aGVyaW5lIENsaWZmb3JkLCBDaGxvZSBsZWF2ZXMgaGVyIGhvdXNlIGFuZCBzZXRzIG91dCBpbiBzZWFyY2ggb2YgdGhyZWUgY29zeSBzYXVzYWdlcy4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInF1ZXN0aW9ucy1ibG9jayIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZhcS10aXRsZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTyBxdWUgw6kgbyBJbmRpY291IEJ1c2luZXNzPyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJzdGFuZGFyZC1wYXJhZ3JhcGgiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiT25lIGRheSwgYWZ0ZXIgYSB0cm91YmxpbmcgdmlzaXQgZnJvbSB0aGUgZ2lhbnQgQ2F0aGVyaW5lIENsaWZmb3JkLCBDaGxvZSBsZWF2ZXMgaGVyIGhvdXNlIGFuZCBzZXRzIG91dCBpbiBzZWFyY2ggb2YgdGhyZWUgY29zeSBzYXVzYWdlcy4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInF1ZXN0aW9ucy1ibG9jayIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZhcS10aXRsZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQ29tbyBnYW5oYXIgZGluaGVpcm8gY29tIG8gSW5kaWNvdT8iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIk9uZSBkYXksIGFmdGVyIGEgdHJvdWJsaW5nIHZpc2l0IGZyb20gdGhlIGdpYW50IENhdGhlcmluZSBDbGlmZm9yZCwgQ2hsb2UgbGVhdmVzIGhlciBob3VzZSBhbmQgc2V0cyBvdXQgaW4gc2VhcmNoIG9mIHRocmVlIGNvc3kgc2F1c2FnZXMuIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJxdWVzdGlvbnMtYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmYXEtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk8gcXVlIGV1IHBvc3NvIEluZGljYXI/IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInN0YW5kYXJkLXBhcmFncmFwaCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJPbmUgZGF5LCBhZnRlciBhIHRyb3VibGluZyB2aXNpdCBmcm9tIHRoZSBnaWFudCBDYXRoZXJpbmUgQ2xpZmZvcmQsIENobG9lIGxlYXZlcyBoZXIgaG91c2UgYW5kIHNldHMgb3V0IGluIHNlYXJjaCBvZiB0aHJlZSBjb3N5IHNhdXNhZ2VzLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyYWRpZW50LWRpdiIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmFubmVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYW5uZXItdGV4dC13cmFwcGVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN0YS1oZWFkZXIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJJbmljaWUgYWdvcmEgY29tIG8gSW5kaWNvdSBCdXNpbmVzcyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3RhbmRhcmQtcGFyYWdyYXBoIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVm9jw6ogdGVtIGVtcHJlc2Egb3UgZGVzZWphIGNyaWFyIHVtIGFudW5jaW8gZGUgSW5kaWNhw6fDo28/IEVudHJlIGFnb3JhIHBhcmEgbyBJbmRpY291IEJ1c2luZXNzIGUgdGVuaGEgdW1hIHBsYXRhZm9ybWEgY29tcGxldGEgZGUgSW5kaWNhw6fDtWVzISIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiYW5uZXItYnV0dG9uIHctYnV0dG9uIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiIsIHRhcmdldDogIl9ibGFuayIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkluaWNpYXIgQWdvcmEgZGUgR3Jhw6dhISIpXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJzZWN0aW9uIiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFjdC1mb3JtIiwgYXR0cnM6IHsgaWQ6ICJjb250YWN0LWZvcm0iIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJWYW1vcyB0b21hciB1bSBjYWbDqT8hIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJFbnRyZSBlbSBjb250YXRvIHBhcmEgcGFyY2VyaWFzLCBuZWfDs2Npb3Mgb3UgYXTDqSBtZXNtbyBjb252ZXJzYXIgOikiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInNtYWxsLXRleHQiLCBhdHRyczogeyBpZDogImZvcm1JbnN0cnVjdGlvbnMiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZW0iLCB7IHN0YXRpY0NsYXNzOiAiaXRhbGljLXRleHQtMiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkNhbXBvcyBjb20gYXN0ZXJpc2NvICgqKSBzw6NvIG9icmlnYXTDs3Jpb3MuIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctZm9ybSIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiAid2YtZm9ybS1Db250YWN0LUZvcm0iLAogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ3Zi1mb3JtLUNvbnRhY3QtRm9ybSIsCiAgICAgICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6ICJDb250YWN0IEZvcm0iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFjdC1mb3JtLWdyaWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgInctbm9kZS1fMjA2YWZhMDAtY2E1MS0wMTRiLTZkMTctMjMyNDllZjk3ZWJjLWIwMjAxMzEwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcjogIkZpcnN0LU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImNvbnRhY3QtZmlyc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlByaW1laXJvIG5vbWUgKiIpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LWlucHV0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoOiAiMjU2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJGaXJzdC1OYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW5hbWUiOiAiRmlyc3QgTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogIkZpcnN0LU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3LW5vZGUtXzIwNmFmYTAwLWNhNTEtMDE0Yi02ZDE3LTIzMjQ5ZWY5N2VjMC1iMDIwMTMxMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3I6ICJMYXN0LU5hbWUiLCBpZDogImNvbnRhY3QtbGFzdC1uYW1lIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTb2JyZW5vbWUgKiIpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LWlucHV0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoOiAiMjU2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJMYXN0LU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6ICJMYXN0IE5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJMYXN0LU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3LW5vZGUtXzIwNmFmYTAwLWNhNTEtMDE0Yi02ZDE3LTIzMjQ5ZWY5N2VjNC1iMDIwMTMxMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGZvcjogIkVtYWlsIiwgaWQ6ICJjb250YWN0LWVtYWlsIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiRW1haWwgKiIpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LWlucHV0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImVtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDogIjI1NiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiRW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6ICJFbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogIkVtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidy1ub2RlLV8yMDZhZmEwMC1jYTUxLTAxNGItNmQxNy0yMzI0OWVmOTdlYzgtYjAyMDEzMTAiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJsYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yOiAiQ29udGFjdC1QaG9uZS1OdW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImNvbnRhY3QtcGhvbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJOw7ptZXJvIGRlIFRlbGVmb25lIildCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInctaW5wdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDogIjI1NiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiQ29udGFjdC1QaG9uZS1OdW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6ICJDb250YWN0IFBob25lIE51bWJlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogIkNvbnRhY3QtUGhvbmUtTnVtYmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidy1ub2RlLV8yMDZhZmEwMC1jYTUxLTAxNGItNmQxNy0yMzI0OWVmOTdlY2MtYjAyMDEzMTAiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJsYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBmb3I6ICJNZXNzYWdlIiwgaWQ6ICJjb250YWN0LW1lc3NhZ2UiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJNZXNzYWdlbSIpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3LWlucHV0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6ICJNZXNzYWdlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDogIjUwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJNZXNzYWdlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJNZXNzYWdlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzdWJtaXQtYnV0dG9uLTIgdy1idXR0b24iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VibWl0IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiRW52aWFyIiwKICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXdhaXQiOiAiQWd1YXJkZS4uLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctZm9ybS1kb25lIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigiT2JyaWdhZG8hIFN1YSBtZW5zYWdlbSBmb2kgZW52aWFkYSEiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LWZvcm0tZmFpbCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJPb3BzISBBbGdvIGRldSBlcnJhZG8gYW8gZW52aWFyIG8gZm9ybXVsw6FyaW8uIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtY29udGFpbmVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LWxheW91dC1ncmlkIGZvb3Rlci1ncmlkIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlci1ibG9jayIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9vdGVyLWxvZ28iLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZHMtc3NsLndlYmZsb3cuY29tLzYwYzBlZjlmMDIwMDRkN2Q1MzIwMTMwYy82MGMyMDc2ZjI4YTcyNjA3NGVjYjY3ZDFfa29hbGEtbG9nbzIucG5nIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiNTQiLAogICAgICAgICAgICAgICAgc2l6ZXM6ICI1NHB4IiwKICAgICAgICAgICAgICAgIHNyY3NldDoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIwNzZmMjhhNzI2MDc0ZWNiNjdkMV9rb2FsYS1sb2dvMi1wLTUwMC5wbmciICsKICAgICAgICAgICAgICAgICAgIiA1MDB3LCAiICsKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIwNzZmMjhhNzI2MDc0ZWNiNjdkMV9rb2FsYS1sb2dvMi1wLTgwMC5wbmciICsKICAgICAgICAgICAgICAgICAgIiA4MDB3LCAiICsKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdXBsb2Fkcy1zc2wud2ViZmxvdy5jb20vNjBjMGVmOWYwMjAwNGQ3ZDUzMjAxMzBjLzYwYzIwNzZmMjhhNzI2MDc0ZWNiNjdkMV9rb2FsYS1sb2dvMi5wbmciICsKICAgICAgICAgICAgICAgICAgIiAxMDAwdyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYXJhZ3JhcGgtYmFzaWMiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkEgUGxhdGFmb3JtYSBkZSBJbmRpY2HDp8O1ZXMgbWFpcyBDb21wbGV0YSBkbyBNZXJjYWRvISIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLWJsb2NrIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLXRpdGxlIiB9LCBbX3ZtLl92KCJTb2JyZSBuw7NzIildKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFyYWdyYXBoLWJhc2ljIF80MC1ib3R0b20tcGFkZGluZyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQnVzaW5lc3MiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFyYWdyYXBoLWJhc2ljIF80MC1ib3R0b20tcGFkZGluZyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiU29sdcOnw7VlcyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwYXJhZ3JhcGgtYmFzaWMgXzQwLWJvdHRvbS1wYWRkaW5nIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJDb250YXRvIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcmFncmFwaC1iYXNpYyBfNDAtYm90dG9tLXBhZGRpbmciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkRlcG9pbWVudG9zIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItYmxvY2siIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItdGl0bGUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlJlZGVzIFNvY2lhaXMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFyYWdyYXBoLWJhc2ljIF80MC1ib3R0b20tcGFkZGluZyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSW5zdGFncmFtIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcmFncmFwaC1iYXNpYyBfNDAtYm90dG9tLXBhZGRpbmciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkZhY2Vib29rIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcmFncmFwaC1iYXNpYyBfNDAtYm90dG9tLXBhZGRpbmciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkxpbmtlZGluIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LWZvcm0iIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGlkOiAiZW1haWwtZm9ybSIsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICJlbWFpbC1mb3JtIiwKICAgICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6ICJFbWFpbCBGb3JtIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZSBpbmNyZXZhIGVtIG5vc3NhIE5ld3NsZXR0ZXIhIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicGFyYWdyYXBoLWJhc2ljIF80MC1ib3R0b20tcGFkZGluZyIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJTZSBpbnNjcmV2YSBlIHJlY2ViYSBub3ZpZGFkZXMsIGF0dWFsaXphw6fDtWVzIGUgb2ZlcnRhcyBkYSBJbmRpY291ISIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXQtZmllbGQgdy1pbnB1dCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImVtYWlsIiwKICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg6ICIyNTYiLAogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAiZGF0YS1uYW1lIjogIk5hbWUiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiSW5zaXJhIHNldSBlLW1haWwiLAogICAgICAgICAgICAgICAgICAgIGlkOiAibmFtZSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic3VibWl0LWJ1dHRvbiB3LWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInN1Ym1pdCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJTZSBpbnNjcmV2ZXIiLAogICAgICAgICAgICAgICAgICAgICJkYXRhLXdhaXQiOiAiUGxlYXNlIHdhaXQuLi4iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctZm9ybS1kb25lIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIk9icmlnYWRvISBTZXUgZS1tYWlsIGZvaSByZWNlYmlkbyEiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctZm9ybS1mYWlsIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiT29wcyEgQWxnbyBkZXUgZXJyYWRvIGFvIGVudmlhciBvIGZvcm11bMOhcmlvLiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmx1ZS1iYXIiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsZWdhbC1jb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxlZ2FsLXRleHQiIH0sIFsKICAgICAgICAgIF92bS5fdigiQ29weXJpZ2h0IMKpIDIwMjEgSW5kaWNvdSIpCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}